plugins {
    id 'java'
    id "org.springframework.boot" version "3.0.5"
    id 'io.spring.dependency-management' version '1.1.0'
    id 'jacoco'
    id 'checkstyle'
    id 'org.barfuin.gradle.jacocolog' version '3.0.0'
    id "org.sonarqube" version "3.5.0.2730"
}

group = 'com.cdanmontoya'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.0.5'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.0.5'
    implementation 'org.springframework.boot:spring-boot-starter-webflux:3.0.5'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.0.5'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc:3.0.5'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc:3.0.5'
    implementation 'org.postgresql:postgresql:42.6.0'
    implementation 'org.jdbi:jdbi3-core:3.37.1'
    implementation 'org.jdbi:jdbi3-sqlobject:3.37.1'
    implementation 'org.jdbi:jdbi3-postgres:3.37.1'
    implementation 'org.jdbi:jdbi3-spring5:3.37.1'
    implementation 'org.flywaydb:flyway-core:9.16.1'
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.14.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-guava:2.14.2'
    developmentOnly 'org.springframework.boot:spring-boot-devtools:3.0.5'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.0.5'
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.0.1'
    testImplementation 'io.projectreactor:reactor-test:3.5.4'
    testImplementation 'com.h2database:h2:2.1.214'
    testImplementation 'org.mockito:mockito-core:5.2.0'
    testImplementation 'net.datafaker:datafaker:1.8.1'
    testImplementation 'com.github.tomakehurst:wiremock:2.27.2'
}

test {
    useJUnitPlatform()
}

sourceSets {
    integrationTest {
        java {
            srcDirs('src/it/java')
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
        resources.srcDir file('src/it/resources')
    }
}

task integrationTest(type: Test) {
    description = "Run integration tests"
    group = "verification"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    useJUnitPlatform()

    reports {
        html.enabled true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/it/html')
    }
}

configurations {
    integrationTestImplementation.extendsFrom(testImplementation)
    integrationTestRuntimeOnly.extendsFrom(testRuntimeOnly)
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    executionData integrationTest

    dependsOn test
    dependsOn integrationTest

    reports {
        xml.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/configuration/*"
            ])
        }))
    }

    getExecutionData().setFrom(fileTree(buildDir).include('/jacoco/*.exec'))
}

sonar {
    properties {
        property 'sonar.projectKey', 'cdanmontoya_backend-base'
        property 'sonar.organization', 'cdanmontoya'
        property 'sonar.host.url', 'https://sonarcloud.io'
    }
}

tasks.named("sonar").configure {
    dependsOn jacocoTestReport
}
